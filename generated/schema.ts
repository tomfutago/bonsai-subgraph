// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Bonsai extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenID", Value.fromBigInt(BigInt.zero()));
    this.set("tokenURI", Value.fromString(""));
    this.set("holder", Value.fromString(""));
    this.set("name", Value.fromString(""));
    this.set("image", Value.fromString(""));
    this.set("animation_url", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Bonsai entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Bonsai entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Bonsai", id.toString(), this);
    }
  }

  static load(id: string): Bonsai | null {
    return changetype<Bonsai | null>(store.get("Bonsai", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenID(): BigInt {
    let value = this.get("tokenID");
    return value!.toBigInt();
  }

  set tokenID(value: BigInt) {
    this.set("tokenID", Value.fromBigInt(value));
  }

  get tokenURI(): string {
    let value = this.get("tokenURI");
    return value!.toString();
  }

  set tokenURI(value: string) {
    this.set("tokenURI", Value.fromString(value));
  }

  get holder(): string {
    let value = this.get("holder");
    return value!.toString();
  }

  set holder(value: string) {
    this.set("holder", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get image(): string {
    let value = this.get("image");
    return value!.toString();
  }

  set image(value: string) {
    this.set("image", Value.fromString(value));
  }

  get animation_url(): string {
    let value = this.get("animation_url");
    return value!.toString();
  }

  set animation_url(value: string) {
    this.set("animation_url", Value.fromString(value));
  }

  get Pot(): string | null {
    let value = this.get("Pot");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set Pot(value: string | null) {
    if (!value) {
      this.unset("Pot");
    } else {
      this.set("Pot", Value.fromString(<string>value));
    }
  }

  get Pet(): string | null {
    let value = this.get("Pet");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set Pet(value: string | null) {
    if (!value) {
      this.unset("Pet");
    } else {
      this.set("Pet", Value.fromString(<string>value));
    }
  }

  get Bark(): string | null {
    let value = this.get("Bark");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set Bark(value: string | null) {
    if (!value) {
      this.unset("Bark");
    } else {
      this.set("Bark", Value.fromString(<string>value));
    }
  }

  get Leaves(): string | null {
    let value = this.get("Leaves");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set Leaves(value: string | null) {
    if (!value) {
      this.unset("Leaves");
    } else {
      this.set("Leaves", Value.fromString(<string>value));
    }
  }

  get Fruit(): string | null {
    let value = this.get("Fruit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set Fruit(value: string | null) {
    if (!value) {
      this.unset("Fruit");
    } else {
      this.set("Fruit", Value.fromString(<string>value));
    }
  }

  get NumberOfFruit(): string | null {
    let value = this.get("NumberOfFruit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set NumberOfFruit(value: string | null) {
    if (!value) {
      this.unset("NumberOfFruit");
    } else {
      this.set("NumberOfFruit", Value.fromString(<string>value));
    }
  }

  get GroundCover(): string | null {
    let value = this.get("GroundCover");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set GroundCover(value: string | null) {
    if (!value) {
      this.unset("GroundCover");
    } else {
      this.set("GroundCover", Value.fromString(<string>value));
    }
  }

  get Background(): string | null {
    let value = this.get("Background");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set Background(value: string | null) {
    if (!value) {
      this.unset("Background");
    } else {
      this.set("Background", Value.fromString(<string>value));
    }
  }
}

export class Holder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Holder entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Holder entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Holder", id.toString(), this);
    }
  }

  static load(id: string): Holder | null {
    return changetype<Holder | null>(store.get("Holder", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get Bonsai(): Array<string> | null {
    let value = this.get("Bonsai");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set Bonsai(value: Array<string> | null) {
    if (!value) {
      this.unset("Bonsai");
    } else {
      this.set("Bonsai", Value.fromStringArray(<Array<string>>value));
    }
  }
}
